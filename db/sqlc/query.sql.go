// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createFruit = `-- name: CreateFruit :one
INSERT INTO fruit (
  id, name, color, price, quantity
) VALUES (
  uuid_if_empty($6)::uuid, $1, $2, $3, $4
) ON CONFLICT (id) DO UPDATE 
  SET name = $2, color = $3, price = $4, quantity = $5
RETURNING id, name, color, price, quantity, created_at
`

type CreateFruitParams struct {
	Name       string    `json:"name"`
	Color      string    `json:"color"`
	Price      int64     `json:"price"`
	Quantity   int64     `json:"quantity"`
	Quantity_2 int64     `json:"quantity_2"`
	ID         uuid.UUID `json:"id"`
}

func (q *Queries) CreateFruit(ctx context.Context, arg CreateFruitParams) (Fruit, error) {
	row := q.db.QueryRow(ctx, createFruit,
		arg.Name,
		arg.Color,
		arg.Price,
		arg.Quantity,
		arg.Quantity_2,
		arg.ID,
	)
	var i Fruit
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Color,
		&i.Price,
		&i.Quantity,
		&i.CreatedAt,
	)
	return i, err
}

const deleteFruit = `-- name: DeleteFruit :exec
DELETE FROM fruit
WHERE id = $1
`

func (q *Queries) DeleteFruit(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteFruit, id)
	return err
}

const getFruit = `-- name: GetFruit :one
SELECT id, name, color, price, quantity, created_at FROM fruit
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFruit(ctx context.Context, id string) (Fruit, error) {
	row := q.db.QueryRow(ctx, getFruit, id)
	var i Fruit
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Color,
		&i.Price,
		&i.Quantity,
		&i.CreatedAt,
	)
	return i, err
}

const listFruits = `-- name: ListFruits :many
SELECT id, name, color, price, quantity, created_at FROM fruit
ORDER BY id LIMIT $1 OFFSET $2
`

type ListFruitsParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) ListFruits(ctx context.Context, arg ListFruitsParams) ([]Fruit, error) {
	rows, err := q.db.Query(ctx, listFruits, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Fruit{}
	for rows.Next() {
		var i Fruit
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Color,
			&i.Price,
			&i.Quantity,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFruit = `-- name: UpdateFruit :one
UPDATE fruit
  set price = $2
WHERE id = $1
RETURNING id, name, color, price, quantity, created_at
`

type UpdateFruitParams struct {
	ID    string `json:"id"`
	Price int64  `json:"price"`
}

func (q *Queries) UpdateFruit(ctx context.Context, arg UpdateFruitParams) (Fruit, error) {
	row := q.db.QueryRow(ctx, updateFruit, arg.ID, arg.Price)
	var i Fruit
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Color,
		&i.Price,
		&i.Quantity,
		&i.CreatedAt,
	)
	return i, err
}
